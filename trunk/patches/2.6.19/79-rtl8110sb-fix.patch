
The RTL8110SB in the Thecus n2100 clears the lower half of
TxDescStartAddr when the upper half of that register is written to
with a zero, so we need to write to the lower and upper halves the
other way round.  (Note that only PCI MEM transactions seem to have
this problem, writing to the same registers in IO space doesn't
give the same problem.)

Also disable error interrupts, as the 8110SB consistently gets a PCI
parity error interrupt shortly after bringing the interface up, and
the error recovery logic that subsequently runs causes the chip to stop
working at all.


Index: linux-2.6.19-rc1/drivers/net/r8169.c
===================================================================
--- linux-2.6.19-rc1.orig/drivers/net/r8169.c	2006-10-06 00:24:16.000000000 +0200
+++ linux-2.6.19-rc1/drivers/net/r8169.c	2006-10-06 00:50:42.000000000 +0200
@@ -491,7 +491,7 @@
 #endif
 
 static const u16 rtl8169_intr_mask =
-	SYSErr | LinkChg | RxOverflow | RxFIFOOver | TxErr | TxOK | RxErr | RxOK;
+	LinkChg | RxOverflow | RxFIFOOver | TxErr | TxOK | RxErr | RxOK;
 static const u16 rtl8169_napi_event =
 	RxOK | RxOverflow | RxFIFOOver | TxOK | TxErr;
 static const unsigned int rtl8169_rx_config =
@@ -2622,10 +2622,12 @@
 		if (!(status & rtl8169_intr_mask))
 			break;
 
+#if 0
 		if (unlikely(status & SYSErr)) {
 			rtl8169_pcierr_interrupt(dev);
 			break;
 		}
+#endif
 
 		if (status & LinkChg)
 			rtl8169_check_link_status(dev, tp, ioaddr);
