Index: linux-2.6.19-rc1/arch/arm/mach-ixp4xx/fsg-pci.c
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ linux-2.6.19-rc1/arch/arm/mach-ixp4xx/fsg-pci.c	2006-10-06 01:20:50.000000000 +0200
@@ -0,0 +1,65 @@
+/*
+ * arch/arch/mach-ixp4xx/fsg-pci.c
+ *
+ * PCI setup routines for Freecom FSG-3 Platform
+ *
+ * Based on ixdpg425-pci.c by
+ * Copyright (C) 2004 MontaVista Softwrae, Inc.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ *
+ */
+
+#include <linux/kernel.h>
+#include <linux/pci.h>
+#include <linux/init.h>
+
+#include <asm/mach-types.h>
+#include <asm/hardware.h>
+#include <asm/irq.h>
+
+#include <asm/mach/pci.h>
+
+extern void ixp4xx_pci_preinit(void);
+extern int ixp4xx_setup(int nr, struct pci_sys_data *sys);
+extern struct pci_bus *ixp4xx_scan_bus(int nr, struct pci_sys_data *sys);
+
+void __init fsg_pci_preinit(void)
+{
+	set_irq_type(IRQ_IXP4XX_GPIO6, IRQT_LOW);
+	set_irq_type(IRQ_IXP4XX_GPIO7, IRQT_LOW);
+	set_irq_type(IRQ_IXP4XX_GPIO5, IRQT_LOW);
+
+	ixp4xx_pci_preinit();
+}
+
+static int __init fsg_map_irq(struct pci_dev *dev, u8 slot, u8 pin)
+{
+	if (slot == 14)
+		return IRQ_IXP4XX_GPIO6;
+	else if (slot == 13)
+		return IRQ_IXP4XX_GPIO7;
+	else if (slot == 12)
+		return IRQ_IXP4XX_GPIO5;
+	else return -1;
+}
+
+struct hw_pci fsg_pci __initdata = {
+	.nr_controllers = 1,
+	.preinit =        fsg_pci_preinit,
+	.swizzle =        pci_std_swizzle,
+	.setup =          ixp4xx_setup,
+	.scan =           ixp4xx_scan_bus,
+	.map_irq =        fsg_map_irq,
+};
+
+int __init fsg_pci_init(void)
+{
+	if (machine_is_fsg())
+		pci_common_init(&fsg_pci);
+	return 0;
+}
+
+subsys_initcall(fsg_pci_init);
Index: linux-2.6.19-rc1/arch/arm/mach-ixp4xx/fsg-setup.c
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ linux-2.6.19-rc1/arch/arm/mach-ixp4xx/fsg-setup.c	2006-10-06 01:22:40.000000000 +0200
@@ -0,0 +1,241 @@
+/*
+ * arch/arm/mach-ixp4xx/fsg-setup.c
+ *
+ * Based on coyote-setup.c by
+ * Copyright (C) 2003-2005 MontaVista Software, Inc.
+ *
+ */
+
+#include <linux/kernel.h>
+#include <linux/init.h>
+#include <linux/device.h>
+#include <linux/serial.h>
+#include <linux/tty.h>
+#include <linux/serial_8250.h>
+#include <linux/slab.h>
+
+#include <asm/types.h>
+#include <asm/setup.h>
+#include <asm/memory.h>
+#include <asm/hardware.h>
+#include <asm/irq.h>
+#include <asm/mach-types.h>
+#include <asm/mach/arch.h>
+#include <asm/mach/flash.h>
+
+#include <linux/mtd/mtd.h>
+#include <linux/netdevice.h>
+#include <linux/etherdevice.h>
+
+
+
+
+#ifdef CONFIG_LEDS_CLASS
+#include <linux/leds.h>
+#endif
+
+static struct flash_platform_data fsg_flash_data = {
+	.map_name	= "cfi_probe",
+	.width		= 2,
+};
+
+static struct resource fsg_flash_resource = {
+	.flags		= IORESOURCE_MEM,
+};
+
+static struct platform_device fsg_flash = {
+	.name		= "IXP4XX-Flash",
+	.id		= 0,
+	.dev		= {
+		.platform_data = &fsg_flash_data,
+	},
+	.num_resources	= 1,
+	.resource	= &fsg_flash_resource,
+};
+
+static struct ixp4xx_i2c_pins fsg_i2c_gpio_pins = {
+        .sda_pin                = 12,
+        .scl_pin                = 13,
+};
+
+static struct platform_device fsg_i2c_controller = {
+        .name                   = "IXP4XX-I2C",
+        .id                     = 0,
+        .dev.platform_data      = &fsg_i2c_gpio_pins,
+        .num_resources          = 0,
+};
+
+static struct resource fsg_uart_resource = {
+	.start	= IXP4XX_UART2_BASE_PHYS,
+	.end	= IXP4XX_UART2_BASE_PHYS + 0x0fff,
+	.flags	= IORESOURCE_MEM,
+};
+
+static struct plat_serial8250_port fsg_uart_data[] = {
+	{
+		.mapbase	= IXP4XX_UART2_BASE_PHYS,
+		.membase	= (char *)IXP4XX_UART2_BASE_VIRT + REG_OFFSET,
+		.irq		= IRQ_IXP4XX_UART2,
+		.flags		= UPF_BOOT_AUTOCONF | UPF_SKIP_TEST,
+		.iotype		= UPIO_MEM,
+		.regshift	= 2,
+		.uartclk	= IXP4XX_UART_XTAL,
+	},
+	{ },
+};
+
+static struct platform_device fsg_uart = {
+	.name		= "serial8250",
+	.id		= PLAT8250_DEV_PLATFORM,
+	.dev			= {
+		.platform_data	= fsg_uart_data,
+	},
+	.num_resources	= 1,
+	.resource	= &fsg_uart_resource,
+};
+
+static struct platform_device *fsg_devices[] __initdata = {
+	&fsg_i2c_controller,
+	&fsg_flash,
+	&fsg_uart
+};
+
+#ifdef CONFIG_LEDS_CLASS
+static struct resource fsg_led_resources[] = {
+        {
+                .name           = "15h",
+                .start          = 15,
+                .end            = 15,
+                .flags          = IXP4XX_GPIO_HIGH,
+        },
+};
+
+static struct platform_device fsg_leds = {
+        .name                   = "IXP4XX-GPIO-LED",
+        .id                     = -1,
+        .num_resources          = ARRAY_SIZE(fsg_led_resources),
+        .resource               = fsg_led_resources,
+};
+#endif
+
+
+
+
+
+/*
+ * When the RedBoot config partition is added the MAC address is read from
+ * it.
+ */
+
+static struct sockaddr mac;
+static struct sockaddr mac2;
+
+static void fsg_flash_add(struct mtd_info *mtd) {
+
+	if (strcmp(mtd->name, "RedBoot config") == 0) {
+		size_t retlen;
+		int err;
+
+		/* the mac addr is at a known offset */
+		/* 0x422 for port 0 */
+		/* 0x43b for port 1 */
+
+		err = mtd->read(mtd, 0x0422, 6, &retlen, (u8 *) &mac.sa_data);
+		if (err != 0 || retlen != 6)
+			printk(KERN_ERR "fsg: mac addr port 0 read failed\n");
+
+		err = mtd->read(mtd, 0x043b, 6, &retlen, (u8 *) &mac2.sa_data);
+		if (err != 0 || retlen != 6)
+			printk(KERN_ERR "fsg: mac addr port 1 read failed\n");
+	}
+}
+
+static void fsg_flash_remove(struct mtd_info *mtd) {
+}
+
+static struct mtd_notifier fsg_flash_notifier = {
+	.add = fsg_flash_add,
+	.remove = fsg_flash_remove,
+};
+
+static int fsg_netdev_event(struct notifier_block *this,
+				unsigned long event, void *ptr)
+{
+
+struct net_device *dev = ptr;
+
+	/* identify the ixp4xx eth by mac 00:02:b3:xx:xx:xx */
+	if (dev->dev_addr[0] != 0x00 || dev->dev_addr[1] != 0x02 || dev->dev_addr[2] != 0xB3)
+		return NOTIFY_DONE;
+
+	/* 00:02:b3:01:01:01 = port 0 */
+	if (dev->dev_addr[3] == 0x01 || dev->dev_addr[4] == 0x01 || dev->dev_addr[5] == 0x01)
+		if (event == NETDEV_REGISTER && is_valid_ether_addr(mac.sa_data)) {
+			mac.sa_family = dev->type;
+			dev_set_mac_address(dev, &mac);
+			printk(KERN_INFO
+				"ixp400_eth: MAC address now set to %.2x:%.2x:%.2x:%.2x:%.2x:%.2x for port 0\n",
+				mac.sa_data[0], mac.sa_data[1], mac.sa_data[2],
+				mac.sa_data[3], mac.sa_data[4], mac.sa_data[5]);
+		}
+
+	/* 00:02:b3:02:02:02 = port 1 */
+	if (dev->dev_addr[3] == 0x02 || dev->dev_addr[4] == 0x02 || dev->dev_addr[5] == 0x02)
+		if (event == NETDEV_REGISTER && is_valid_ether_addr(mac2.sa_data)) {
+			mac2.sa_family = dev->type;
+			dev_set_mac_address(dev, &mac2);
+			printk(KERN_INFO
+				"ixp400_eth: MAC address now set to %.2x:%.2x:%.2x:%.2x:%.2x:%.2x for port 1\n",
+				mac2.sa_data[0], mac2.sa_data[1], mac2.sa_data[2],
+				mac2.sa_data[3], mac2.sa_data[4], mac2.sa_data[5]);
+		}
+
+	return NOTIFY_DONE;
+}
+
+static struct notifier_block fsg_netdev_notifier = {
+	.notifier_call = fsg_netdev_event,
+};
+
+static void __init fsg_init(void)
+{
+	/* The flash has an ethernet MAC embedded in it which we need,
+	 * that is all this notifier does.
+	 */
+	register_mtd_user(&fsg_flash_notifier);
+	register_netdevice_notifier(&fsg_netdev_notifier);
+
+	ixp4xx_sys_init();
+
+
+#ifdef CONFIG_LEDS_CLASS
+        /* We don't care if this fails. */
+        (void)platform_device_register(&fsg_leds);
+#endif
+
+	fsg_flash_resource.start = IXP4XX_EXP_BUS_BASE(0);
+	fsg_flash_resource.end = IXP4XX_EXP_BUS_BASE(0) + SZ_32M - 1;
+
+	*IXP4XX_EXP_CS0 |= IXP4XX_FLASH_WRITABLE;
+	*IXP4XX_EXP_CS1 = *IXP4XX_EXP_CS0;
+
+	if (machine_is_fsg()) {
+		fsg_uart_data[0].membase =
+			(char*)(IXP4XX_UART1_BASE_VIRT + REG_OFFSET);
+		fsg_uart_data[0].mapbase = IXP4XX_UART1_BASE_PHYS;
+		fsg_uart_data[0].irq = IRQ_IXP4XX_UART1;
+	}
+
+	platform_add_devices(fsg_devices, ARRAY_SIZE(fsg_devices));
+}
+
+MACHINE_START(FSG, "Freecom FSG-3")
+	.phys_io	= IXP4XX_PERIPHERAL_BASE_PHYS,
+	.io_pg_offst	= ((IXP4XX_PERIPHERAL_BASE_VIRT) >> 18) & 0xfffc,
+	.map_io		= ixp4xx_map_io,
+	.init_irq	= ixp4xx_init_irq,
+	.timer		= &ixp4xx_timer,
+	.boot_params	= 0x0100,
+	.init_machine	= fsg_init,
+MACHINE_END
+
Index: linux-2.6.19-rc1/arch/arm/mach-ixp4xx/Kconfig
===================================================================
--- linux-2.6.19-rc1.orig/arch/arm/mach-ixp4xx/Kconfig	2006-09-20 05:42:06.000000000 +0200
+++ linux-2.6.19-rc1/arch/arm/mach-ixp4xx/Kconfig	2006-10-06 01:20:50.000000000 +0200
@@ -81,6 +81,14 @@
 	  NAS 100d device. For more information on this platform,
 	  see http://www.nslu2-linux.org/wiki/NAS100d/HomePage
 
+config MACH_FSG
+	bool
+	prompt "Freecom FSG-3"
+	help
+	  Say 'Y' here if you want your kernel to support Freecom's
+	  FSG-3 device. For more information on this
+	  platform see http://www.openfsg.com/
+
 #
 # Avila and IXDP share the same source for now. Will change in future
 #
Index: linux-2.6.19-rc1/arch/arm/mach-ixp4xx/Makefile
===================================================================
--- linux-2.6.19-rc1.orig/arch/arm/mach-ixp4xx/Makefile	2006-09-20 05:42:06.000000000 +0200
+++ linux-2.6.19-rc1/arch/arm/mach-ixp4xx/Makefile	2006-10-06 01:20:50.000000000 +0200
@@ -20,5 +20,6 @@
 obj-$(CONFIG_MACH_GTWX5715)	+= gtwx5715-setup.o
 obj-$(CONFIG_MACH_NSLU2)	+= nslu2-setup.o nslu2-power.o
 obj-$(CONFIG_MACH_NAS100D)	+= nas100d-setup.o nas100d-power.o
+obj-$(CONFIG_MACH_FSG)		+= fsg-pci.o fsg-setup.o
 
 obj-$(CONFIG_PCI)		+= $(obj-pci-$(CONFIG_PCI)) common-pci.o
Index: linux-2.6.19-rc1/include/asm-arm/arch-ixp4xx/fsg.h
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ linux-2.6.19-rc1/include/asm-arm/arch-ixp4xx/fsg.h	2006-10-06 01:23:04.000000000 +0200
@@ -0,0 +1,32 @@
+/*
+ * include/asm-arm/arch-ixp4xx/fsg.h
+ *
+ * Freecom FSG-3 platform specific definitions
+ *
+ * Based on coyote.h by
+ * Copyright 2004 (c) MontaVista, Software, Inc.
+ *
+ * This file is licensed under  the terms of the GNU General Public
+ * License version 2. This program is licensed "as is" without any
+ * warranty of any kind, whether express or implied.
+ */
+
+#ifndef __ASM_ARCH_HARDWARE_H__
+#error "Do not include this directly, instead #include <asm/hardware.h>"
+#endif
+
+/* PCI controller GPIO to IRQ pin mappings */
+
+#define FSG_PCI_SLOT0_PIN	6
+#define FSG_PCI_SLOT1_PIN	7
+
+#define	FSG_PCI_SLOT0_DEVID	14
+#define	FSG_PCI_SLOT1_DEVID	15
+
+#define	FSG_IDE_BASE_PHYS	IXP4XX_EXP_BUS_BASE(3)
+#define	FSG_IDE_BASE_VIRT	0xFFFE1000
+#define	FSG_IDE_REGION_SIZE	0x1000
+
+#define	FSG_IDE_DATA_PORT	0xFFFE10E0
+#define	FSG_IDE_CTRL_PORT	0xFFFE10FC
+#define	FSG_IDE_ERROR_PORT	0xFFFE10E2
Index: linux-2.6.19-rc1/include/asm-arm/arch-ixp4xx/hardware.h
===================================================================
--- linux-2.6.19-rc1.orig/include/asm-arm/arch-ixp4xx/hardware.h	2006-09-20 05:42:06.000000000 +0200
+++ linux-2.6.19-rc1/include/asm-arm/arch-ixp4xx/hardware.h	2006-10-06 01:20:50.000000000 +0200
@@ -46,5 +46,6 @@
 #include "prpmc1100.h"
 #include "nslu2.h"
 #include "nas100d.h"
+#include "fsg.h"
 
 #endif  /* _ASM_ARCH_HARDWARE_H */
Index: linux-2.6.19-rc1/include/asm-arm/arch-ixp4xx/irqs.h
===================================================================
--- linux-2.6.19-rc1.orig/include/asm-arm/arch-ixp4xx/irqs.h	2006-09-20 05:42:06.000000000 +0200
+++ linux-2.6.19-rc1/include/asm-arm/arch-ixp4xx/irqs.h	2006-10-06 01:20:50.000000000 +0200
@@ -109,4 +109,12 @@
 #define        IRQ_NAS100D_PCI_INTD    IRQ_IXP4XX_GPIO8
 #define        IRQ_NAS100D_PCI_INTE    IRQ_IXP4XX_GPIO7
 
+/*
+ * Freecom FSG-3 Board IRQs
+ */
+
+#define	IRQ_FSG_PCI_SLOT0	IRQ_IXP4XX_GPIO6
+#define	IRQ_FSG_PCI_SLOT1	IRQ_IXP4XX_GPIO7
+#define	IRQ_FSG_IDE		IRQ_IXP4XX_GPIO5
+
 #endif
